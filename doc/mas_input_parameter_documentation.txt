!
!-----------------------------------------------------------------------
!
! **********************************
! ****** MAS INPUT PARAMETERS ******
! **********************************
!
      namelist /topology/          &
!
! ****** Grid resolution.
!
        nr,                        & ! Number of radial grid points.
        nt,                        & ! Number of co-latitude grid points.
        np,                        & ! Number of longitude grid points.
!
! ****** MPI decomposition options.
!
        nprocs,                    & ! MPI process topology expressed in
                                     ! a comma-separated triple of the number
                                     ! of MPI processes/ranks in the r, t, and p
                                     ! directions, (e.g. 4,5,7).  The product
                                     ! must equal the total number of MPI ranks.
                                     ! If not set, an automatic topology will be
                                     ! applied.
        auto_decompose,            & ! (Logical) Toggle of automatic grid point
                                     ! distribution across MPI ranks.
        mp_r,                      & ! Array of number of grid points per radial
                                     ! MPI rank (length is nprocs(1)), must add
                                     ! up to nr.
        mp_t,                      & ! Array of number of grid points per colat
                                     ! MPI rank (length is nprocs(2)), must add
                                     ! up to nt.
        mp_p                         ! Array of number of grid points per long
                                     ! MPI rank (length is nprocs(3)), must add
                                     ! up to np.
!
      namelist /data/ &
!
! ****** Spatial domain (ignored for restart runs).
!
        r0,                        & ! Position of the inner radial boundary
                                     ! in units of solar radii (6.96e10cm)
        r1,                        & ! Position of the outer radial boundary
                                     ! in units of solar radii
!
! ****** Time domain.
!
        time_at_start,             & ! Start time of run in mas time units.
                                     ! This will overwrite the time in restart runs.
        tmax,                      & ! End time of run in mas time units.
        ntmax,                     & ! Maximum number of time steps allowed in the run.
!
! ****** Initial condition options for the magnetic field.
!
        initial_field,             & ! Set the initial filed to one of these options:
                                     !   POTENTIAL_FIELD      : Potential field based on input map.
                                     !   DIPOLE               : Global and subsurface dipoles.
                                     !   ALFVEN_WAVE1         : Analytic Alfven wave in theta.
                                     !   ALFVEN_WAVE2         : Analytic Alfven wave in phi.
                                     !   ALFVEN_WAVE2_ROTATED : Same as ALFVEN_WAVE2 but tilted.
                                     !   A_FILE               : Read in initial vector potential from file.
                                     ! The field is alternatively set through a restart file,
                                     ! using load_fields, etc.
! ****** DIPOLE(S).
        b0_dipole,                 & ! Magnetic field strength of Sun-centered dipole.
        dipangle,                  & ! Angle (in degrees) by which the Sun-centered dipole is tilted.
        n_ssdip,                   & ! Number of subsurface dipoles to add.
        r_ssdip,                   & ! Array of subsurface dipoles radial.
        t_ssdip,                   & ! Array of subsurface dipoles theta.
        p_ssdip,                   & ! Array of subsurface dipoles phi.
        alpha_ssdip,               & ! Array of subsurface dipole moment rotations wrt N pole [deg]
        b0_ssdip,                  & ! Array of subsurface dipoles strengths.
! ****** ALFVEN_WAVES.
        wave_mode_r,               & ! Radial wave mode number for Alfven wave tests.
        wave_mode_t,               & ! Theta wave mode number for Alfven wave tests.
        wave_amplitude,            & ! Wave amplitude for Alfven wave tests.
        wave_rotation_t,           & ! Rotation/tilt in theta for ALFVEN_WAVE2_ROTATED.
! ****** POTENTIAL_FIELD.
        bnfile,                    & ! Lower boundary radial magnetic field file (hdf5).
        b_in_gauss,                & ! (Logical) toggle to indicate that the input lower
                                     ! boundary radial magnetic field file is in units of
                                     ! Gauss (.true.) or mas code units (.false.).
        b0,                        & ! If set, input Br field will be scaled so that the maximum
                                     ! normal field magnitude is b0.
        potential_field_bc,        & ! Upper boundary condition for potential field.  Options:
                                     !   CLOSED_WALL     :
                                     !   SOURCE_SURFACE  :
                                     !   MHDSS           : Specific use case, do not use.
        r_ss,                      & ! Source-surface radius for PFSS initial field.
        allow_unbalanced_flux,     & ! (Logical) toggle to add back the unbalanced flux
                                     ! to the input magnetogram.  Only works with source
                                     ! surface potential field.
! ****** A_FILE.
        afile,                     & ! Filename for text file containing 2D r-theta vector potential.
! ****** Monopole Options.
        br00,                      & ! Add artificial monopole radial field (mas magnetic field units).
        fmaxef,                    & ! Maximum expansion factor of the radial monopole specified with br00.
        r1ef,                      & ! Radius where super-radial expansion ceases.
        sigmaef,                   & ! Interval over which the expansion switches
                                     ! from super-radial to radial.
!
! ****** Initial condition options for the plasma.
!
        initial_plasma,            & ! Initial plasma.  Choices are:
                                     !   ZERO-BETA   : Zero-beta equilibrium.  Use "zb" structure
                                     !                 to set parameters, or use zb_rho_file.
                                     !   HYDROSTATIC : Hydrostatic equilibrium.  Use "hs" structure
                                     !                 to set parameters.
                                     !   STREAMER    : Same as HYDROSTATIC but with a modification to Vr
                                     !                 to force an outflowing radial solar wind (hard-wired).
                                     !   1DFILE      : Use "onedfile" text file to describe
                                     !               : spherically symmetric initial plasma
                                     !   2DFILE      : Use 2D file (in r-theta) for axisymmetric initial plasma.
                                     !   NONE
! ****** ZERO-BETA.
        zb_rho_profile,            & ! Zero-beta density profile type.  Options are:
                                     !   GENERATE_INTERNALLY : Use zb input structure to generate rho internally.
                                     !   READ_FROM_FILE      : Read the hdf5 file "zb_rho_file" to set rho.
        zb_rho_file,               & ! Filename (hdf5) for zero-beta initial density.
        zb,                        & ! Zero-beta parameters structure:
                                     !   rho0
                                     !   rho1
                                     !   rho00
                                     !   rhoexp
                                     !   b0
                                     !   b1
                                     !   lam_r0
                                     !   lam_r1
                                     !   lam_l0
                                     !   lam_l1
! ****** HYDROSTATIC.
        hs,                        & ! Hydrostatic equilibrium parameters structure:
                                     !   rho0i
                                     !   rho0f
                                     !   rho1i
                                     !   rho1f
                                     !   b0
                                     !   b1
                                     !   t0i
                                     !   t0f
                                     !   t1i
                                     !   t1f
                                     !   time0
                                     !   time1
! ****** 1DFILE.
        onedfile,                  & ! Name of text file describing the 1D initial plasma.
                                     !   Must be of the form:
                                     !   r	vr	ne	p	 pw
! ****** 2DFILE.
        twodfile_vr,               & ! Filename (hdf5) of theta-phi Vr in code units to use as initial plasma
                                     ! at lower radial boundary.  It is then used to fill in the full 3D domain.
        twodfile_rho,              & ! Filename (hdf5) of theta-phi density in code units to use as initial plasma
                                     ! at lower radial boundary.  It is then used to fill in the full 3D domain.
        twodfile_t,                & ! Filename (hdf5) of theta-phi electron temperature in code units to use as initial plasma
                                     ! at lower radial boundary.  It is then used to fill in the full 3D domain.
        const_t_rho,               & ! (Logical) toggle to either keep lower boundary 2D specified
                                     ! plasma constant when filling in the 3D domain along r (.true.) or
                                     ! use a polytropic radial scaling (.false.).
! ****** Field adding/replacing from file.
        load_fields,               & ! Structure to specify a 3D initial condition field:
                                     !   field  : Field type.
                                     !   action : Either "add" or "initial".
                                     !            "initial" replaces the current initial field, while
                                     !            "add" adds the field to the current field (B only).
                                     !   fname  : Filename (hdf5) of 3D field.
        loaded_b_clean_method,     & ! Method to clean loaded B field before afromb solves:
                                     !   0 : B is used as-is.
                                     !   1 : B is divergence-cleaned with a 3D solve.
                                     !   2 : Each r-slice of Br is flux balanced.
                                     !   3 : Applies (1) and then (2).
        long_sequence_numbers_input, & ! (Logical) toggle to indicate that input time-dept boundary files
                                     ! have a 6 (.true.) or 3 (.false.) digit number sequence.
        trace_seed_file,           & ! Filename (hdf5) that contains the initial tracer positions.
! ****** Flux ropes.
        fluxrope_preserve_br0,     & ! (Logical) If .true., the Br from the flux ropes at r=R0 is
                                     ! subtracted from the Br read in before calculating the potential field.
        tdm_fluxrope,              & ! Structure specifying a TdM flux rope.  Contains:
                                     !   add
                                     !   rope_type
                                     !   origin_r
                                     !   origin_t
                                     !   origin_p
                                     !   normal_t
                                     !   normal_p
                                     !   tilt_from_vertical
                                     !   apex_height
                                     !   footpoint_halfdistance
                                     !   minor_radius
                                     !   delta
                                     !   b_poloidal
                                     !   handedness
                                     !   add_charges
                                     !   charge_magnitude
                                     !   charge_halflength
                                     !   get_bp_from_charge
                                     !   charge_to_bp_factor
                                     !   use_major_radius
                                     !   major_radius
                                     !   insertion_time
        rbsl_fluxrope,             & ! Structure specifying an RBSL flux rope.  Contains:
                                     !   add
                                     !   path_file
                                     !   axial_current
                                     !   minor_radius
                                     !   handedness
                                     !   mirror_poloidal
                                     !   insertion_time
        rope_from_file,            & ! Structure specifying adding a flux rope from file.  Contains:
                                     !   add
                                     !   ar_file
                                     !   at_file
                                     !   ap_file
                                     !   a_factor
                                     !   insertion_time
!
! ****** Restart run options.
!
        rsifile,                   & ! Activate a restart run by setting this to a restart file filename.
        restart_calculation_frame, & ! Indicate whether the restart file was computed in the inertial
                                     ! or corotating frame (allows restarting from one frame to another).
                                     ! Options:
                                     !   INERTIAL
                                     !   COROTATING
        fname_restart_fcs,         & ! Charge state restart filename for restart runs.
        n_rs_input_file_parts,     & !   LEGACY:  Specify number of parts of an old-style multi-file restart.
        rsifile_prefix,            & !   LEGACY:  Filename prefix (path) for multi-part restart.
        rsifile_root,              & !   LEGACY:  Filename root for multi-part restart.
        rsifile_parts,             & !   LEGACY:  Explicitly list filenames of multi-part restart.
!
! ****** Output options.
!
        legacy_output_filenames,   & ! (Logical) toggle to use new output file names (.false.) or
                                     ! use the legacy file output conventions (.true.).
        hdf32,                     & ! Output fields in single (.true.) or double (.false.) precision.
        long_sequence_numbers,     & ! (Logical) toggle to set output hdf5 files to have
                                     ! a 6 (.true.) or 3 (.false.) digit number sequence.
        plotlist,                  & ! Comma-separated list of fields to plot.  Available fields are:
                                     !   vr, vt, vp, br, bt, bp, rho, t, p, pres, jr, jt, jp, ar, at, ap,
                                     !   sifac, heat, ep, em, vr_old, vt_old, vp_old, eta, visc,
                                     !   zp, zm, te, tp, efr, eft, efp, v_par
                                     ! Not all fields are valid for all runs; p and pres are the same.
        ipltxint,                  & ! Iteration cadence to write out field data (hdf5).
        tpltxint,                  & ! Time cadence to write out field data (mas time units).
        slice_plotlist,            & ! Comma-separated list of fields to plot slices of.
                                     ! Choices are the same as those of plotlist.
        slice_ixint,               & ! Iteration cadence to write out field data slices (hdf5).
        slice_txint,               & ! Time cadence to write out field data slices (mas time units).
        slice_tp_radii,            & ! Comma-separated list of radial points
                                     ! to take theta-phi slices at (in solar radii).
        trace_ixint,               & ! Iteration cadence to write out tracer data.
        trace_txint,               & ! Time cadence to write out tracer data (mas time units).
        plot_dump_fcs,             & ! (Logical) to activate charge state 3D hdf5 oputput.
                                     ! Cadence same as field 3D plots ([i|t]pltxint).
        slice_dump_fcs,            & ! (Logical) to activate charge state 2D theta-phi slice hdf5 output.
                                     ! Cadence same as slice plots (slice_[i|t]xint).
        irsdump,                   & ! Iteration cadence to write out restart files (hdf5).
        trsdump,                   & ! Time cadence to write out restart files (mas time units).
        rs_final,                  & ! (Logical) toggle to write a restart file at the end of a run.
        ihistint,                  & ! Iteration cadence to write out histories into text file.
        thistint,                  & ! Time cadence to write out histories into text file (mas time units).
        diag,                      & ! Diagnostic (in-situ) point structure.  Contains:
                                     !   type
                                     !   fields
                                     !   r
                                     !   t
                                     !   p
!
! ****** Grid specification (ignored for restart runs).
!
        rfrac,                     & ! Normalized positions of radial grid
                                     ! segment boundaries (as a fraction of
                                     ! domain size)
        drratio,                   & ! Ratio of radial grid spacing at the end
                                     ! of each segment to its beginning
                                     ! [ length(drratio) = length(rfrac)-1 ].
        nfrmesh,                   & ! Number of times to filter colatitude grid
                                     ! spacing.
        tfrac,                     & ! Normalized positions of colatitude grid
                                     ! segment boundaries (as a fraction of
                                     ! domain size)
        dtratio,                   & ! Ratio of colat grid spacing at the end
                                     ! of each segment to its beginning
                                     ! [ length(drratio) = length(rfrac)-1 ].
        nftmesh,                   & ! Number of times to filter colatitude grid
                                     ! spacing.
        pfrac,                     & ! Normalized positions of longitude grid
                                     ! segment boundaries (as a fraction of
                                     ! domain size)
        dpratio,                   & ! Ratio of long grid spacing at the end
                                     ! of each segment to its beginning
                                     ! [ length(drratio) = length(rfrac)-1 ].
        nfpmesh,                   & ! Number of times to filter longitude grid
                                     ! spacing.
        phishift,                  & ! Apply longitude shift (radians) to the
                                     ! longitude grid.
!
! ****** Time step options.
!
        dtmax,                     & ! Maximum allowed time step in mas time units.
        dtmin,                     & ! Minimum allowed time step in mas time units.
                                     ! If the time step drops below this, the run stops.
        dt_init,                   & ! Initial time step to try. If not set, dtmax will be used.
                                     ! By default, this is not used for restart runs.
        use_dt_init_on_restart,    & ! (Logical) toggle to use the dt_init for a restart run (.true.)
                                     ! of not (.false.).
        dt_max_wave_cfl,           & ! Maximum allowed wave CFL (implicitness).  If wave CFL
                                     ! exceeds this limit, the time step is reduced accordingly.
        cfl,                       & ! Fraction of the CFL time step limit to use.
        dt_max_increase_fac,       & ! Fraction the time step is allowed to increase per step.
!
! ****** General model options.
!
        calculation_frame,         & ! String indicating the frame of reference of the calculation.
                                     ! These also effect how boundary driving is performed.
                                     !   INERTIAL   : Inertial frame.
                                     !   COROTATING : Corotating frame (adds Coriolis and centrifugal forces).
        g0,                        & ! Gravity at the solar surface (code units).
        omega_corotate,            & ! Solar rotation rate in mas units.
        he_frac,                   & ! Helium fraction.
        char_bc0,                  & ! Activate lower characteristic radial boundary condition.
        char_bc1,                  & ! Activate upper characteristic radial boundary condition.
        nfiltub,                   & ! Number of times to filter parallel velocity in
                                     ! lower characteristic boundary condition (default 2).
        ubzero,                    & ! Set flow at inner boundary to zero if it is negative.
        tbc0,                      & ! Temperature in K of the lower radial boundary.
        tchromo,                   & ! Temperature in K of the lower radial boundary used for radiative loss function.
        rho0,                      & ! Density of the lower radial boundary.
!
! ****** Time profiles for various quantities.
!
        tprofile,                  & ! Add a time profile structure.  Contains:
                                     !   t
                                     !   f
                                     !   filename
                                     !   vars
                                     !   on
                                     !   nodes
                                     !   nvars
                                     !   value
                                     ! Available "vars":
                                     !   eta
                                     !   visc
                                     !   v0
                                     !   eflux_psi_e0
                                     !   eflux_phi_e0
                                     !   flow_norm_factor
                                     !   flow_trans_factor
                                     !   eta_photosphere
                                     !   pw0_factor
                                     !   eflux_vr
                                     !   eflux_br
                                     !   edrive_e0
                                     !   edrive_er
                                     !   edrive_et
                                     !   edrive_ep
                                     !   edrive_vr
                                     !   edrive_vt
                                     !   edrive_vp
                                     !   rho_limit
                                     !   io_dump_3d
                                     !   io_dump_tracers
                                     !   io_dump_slices
                                     !   helicity_pumping
                                     !   ohmic_heating_factor
                                     !   zw_heat_factor
                                     !   zw_pressure_factor
                                     !   tdc_phi
!
! ****** Induction equation and resistivity.
!
        advance_a,                 & ! (Logical) toggle to activate vector potential advance (induction equation).
        experimental_a_advance,    & ! (Logical) to activate experimental algorithm for advancing A. DO NOT USE.
        bt_photo_in,               & ! Specifies amount (code units) of transverse field (theta) to
                                     ! advect into the corona from the lower boundary.
        bp_photo_in,               & ! Specifies amount (code units) of transverse field (phi) to
                                     ! advect into the corona from the lower boundary.
        slund,                     & ! Inverse uniform resistivity (1/eta) in code units.
        ifeta_phot,                & ! (Logical) toggle to activate photospheric resistivity.
        eta_phot,                  & ! Photospheric diffusion coefficient.
        eta_phot_file,             & ! Filename (hdf5) to read a photospheric diffusion profile.
        eta_profile,               & ! Type of eta profile.  Options:
                                     !   UNIFORM
                                     !   RADIALLY_DEPENDENT
                                     !   HIGH_SLUND_REGION
                                     !   CUSTOM_TP+R_PROFILE
                                     !   CUSTOM_PROFILE
        eta_profile_r,             & ! Radial eta profile structure.  Contains:
                                     !   active
                                     !   f(3)
                                     !   x(2)
                                     !   w(2)
        eta_profile_tp_file,       & ! Filename (hdf5) of theta-phi eta profile.
        eta_profile_file,          & ! Filename (hdf5) of 3D eta profile.
        eta_fac_0,                 & ! Radial-dept eta profile parameter.
        eta_fac_1,                 & ! Radial-dept eta profile parameter.
        r_eta_crit,                & ! Radial-dept eta profile parameter.
        dr_eta_crit,               & ! Radial-dept eta profile parameter.
        slund_low,                 & ! High_Slund_Region parameter.
        slund_high,                & ! High_Slund_Region parameter.
        dynamic_eta,               & ! (Logical) toggle to activate cell-based eta
                                     ! based on upwind diffusion.
        rmcell,                    & ! Specify the cell magnetic Reynolds number
                                     ! for dynamic eta.
        rmcell_etamax,             & ! Specify the maximum allowed value for eta
                                     ! for dynamic eta.
        eta_bg,                    & ! Background uniform resistivity to add to standard
                                     ! eta.  Useful when using custom eta profiles with
                                     ! time profile control.
        phi_0,                     & ! Used for both eta and visc for high
                                     ! slund or low visc region modes.  Sets the region
                                     ! for the high and low.
        phi_1,                     & ! Used for both eta and visc for high
                                     ! slund or low visc region modes.  Sets the region
                                     ! for the high and low.
        theta_0,                   & ! Used for both eta and visc for high
                                     ! slund or low visc region modes.  Sets the region
                                     ! for the high and low.
        theta_1,                   & ! Used for both eta and visc for high
                                     ! slund or low visc region modes.  Sets the region
                                     ! for the high and low.
        eta_uw_mult,               & ! LEGACY: Scales the upwind resistivity in
                                     ! experimental A advance.
!
! ****** Momentum equation and viscosity.
!
        advance_v,                 & ! (Logical) toggle to activate velocity advance (momentum equation).
        zero_v_parallel,           & ! Zero-out parallel flow.  Useful for zero-beta runs.
        visc,                      & ! Uniform viscosity coefficient (nu) in code units.
        visc_bg,                   & ! Uniform viscosity coefficient to add as
                                     ! background when using custom visc profile runs.
        visc_profile,              & ! Type of viscosity profile.  Options:
                                     !   UNIFORM
                                     !   RADIALLY_DEPENDENT
                                     !   LOW_VISC_REGION
                                     !   CUSTOM_TP+R_PROFILE
                                     !   CUSTOM_PROFILE
        visc_profile_r,            & ! Radial viscosity profile structure.  Contains:
                                     !   active
                                     !   f(3)
                                     !   x(2)
                                     !   w(2)
        visc_profile_tp_file,      & ! Filename (hdf5) of theta-phi viscosity profile.
        visc_profile_file,         & ! Filename (hdf5) of 3D viscosity profile.
        visc_fac_0,                & ! Radial-dept viscosity profile parameter.
        visc_fac_1,                & ! Radial-dept viscosity profile parameter.
        r_visc_crit,               & ! Radial-dept viscosity profile parameter.
        dr_visc_crit,              & ! Radial-dept viscosity profile parameter.
        visc_low,                  & ! LOW_VISC_REGION parameter.
        visc_high,                 & ! LOW_VISC_REGION parameter.
        visc_rho_outside,          & ! (Logical) toggle to compute viscosity as rho*Div(nu-Grad-V) (.true.)
                                     ! or Div(nu-rho-Grad-V) (.false.).
!
! ****** Energy equation, thermal conduction, radiative loss, and heating.
!
        advance_t,                 & ! (Logical) toggle to activate temperature advance (energy equation).
        gamma,                     & ! Ratio of specific heats (e.g. 5/3 for corona, 3/2 for heliosphere).
        advance_tp,                & ! (Logical) toggle to activate the proton temperature advance,
                                     ! along with coupling with electron density.
        iftfloor,                  & ! (Logical) to activate temperature flooring.
        tfloor,                    & ! Value in Kelvin for the temperature floor.
        ifcheck0temp,              & ! (Logical) to activate check of negative temperature.
! ****** Thermal conduction (Collisional).
        advance_tc,                & ! (Logical) toggle to activate Spitzer thermal conduction.
        t_cutoff1,                 & ! Cut-off temperature (in K) for modifying Spitzer thermal conduction.
        tcond,                     & ! Multiplier for electron thermal conduction term.  Must be set >0
                                     ! for thermal conduction to work (e.g. tcond=1.0).
        tcondp,                    & ! Multiplier for proton thermal conduction term.  Must be set >0
                                     ! for proton thermal conduction to work (e.g. tcond=1.0).
        tc_r,                      & ! Thermal conduction radial taper function parameter.
        tc_dr,                     & ! Thermal conduction radial taper function parameter.
        tc_fac0,                   & ! Thermal conduction radial taper function parameter.
        tc_fac1,                   & ! Thermal conduction radial taper function parameter.
        nfilt_kappa,               & ! Number of times to apply a filter to kappa.
        kappa_mask_file,           & ! Filename (hdf5) of [0,1] 3D mask to transition
                                     ! from field-aligned kappa to isotropic.
! ****** Collisionless thermal conduction (CTC).
        use_radial_nocoll,         & ! LEGACY: (Logical) to use old radial-only CTC.
        alpha_nocoll,              & ! CTC multiplicative factor.  If >0, activates CTC.
        alpha_nocoll_p,            & ! CTC multiplicative factor for protons. If >0, activates CTC.
        tc_nocoll_r,               & ! CTC radial increase function parameter.
        tc_nocoll_dr,              & ! CTC radial increase function parameter.
! ****** Radiative loss.
        radloss,                   & ! Factor to multiply by radiative loss.
                                     ! Set to 0 to deactivate radloss, 1.0 to use it fully.
        ifimplrad,                 & ! Set to 1.0 to use implicit radiative loss algorithm.
        rad_law,                   & ! Set radiative loss function.  Choices are:
                                     !   ATHAY
                                     !   ROSNER
                                     !   RTV
                                     !   CHIANTI_v71_CORONA
                                     !   CHIANTI_v71_PHOTO
                                     !   CHIANTI_v713_HYBRID
        legacy_q_chromo_reduction, & ! LEGACY: (Logical) toggle to use the old-style
                                     ! way to taper radiative loss towards zero.
! ****** Coronal heating.
        heatsource,                & ! Structure to specify a heating source.
                                     ! Options:
                                     !   active
                                     !   name
                                     !   type
                                     !   h0
                                     !   lambda
                                     !   power
                                     !   brmax
                                     !   center_gaussian
                                     !   r_profile
                                     !   t_profile
                                     !   b_profile
                                     !   time_profile
                                     !   b_attenuation
                                     !   b_cutoff
                                     !   q0
                                     !   q1
                                     !   lambda0
                                     !   lambda1
                                     !   use_mask.
                                     !   nl_mask
                                     ! Options for "type":
                                     !   exponential
                                     !   two-exponential
                                     !   exponential-b-photo-dependent
                                     !   b-dependent
                                     !   br-dependent
                                     !   gaussian
                                     !   zw-exponential
        heating_flat_topped,       & ! (Logical) to toggle flat-topping the heating with "heat_max".
                                     ! (NOT including ohmic heating).
        heat_max,                  & ! Maximum heating amount (in code units) if "heating_flat_topped" is set.
                                     ! Note that ohmic heating is applied AFTER the flat-top.
        heat_mask_file,            & ! Filename (hdf5) of 3D heat mask [0,1] to use.
        add_ohmic_heating,         & ! (Logical) toggle to add Ohmic heating to heating function.
        heat_file,                 & ! Filename (hdf5) of 3D heating (mas units) to add.
        f_heating,                 & ! Percentage [0,1] of heating that goes to electrons vs.
                                     ! protons in the two-temp model.
        use_chromo_heat,           & ! (Logical) toggle to activate chromospheric heating.
                                     ! NOTE! This modifies the radiative loss function!
        chromo_heat_t_zqc_0,       & ! Minimum temperature (mas units) of radloss cutoff.
                                     ! This is where the radloss -> zero exactly.
        chromo_heat_t_zqc_1,       & ! Upper temperature (mas units) of the chromo heating
                                     ! modification polynomial.
!
! ****** Density advance.
!
        advance_rho,               & ! (Logical) toggle to activate density advance.
        ifcheck0rho,               & ! (Logical) toggle to check for negative density and quit if found.
        ifcheck0pres,              & ! (Logical) toggle to check for negative presure and quit if found.
        ifrholimit,                & ! (Logical) toggle to activate rho limiter.
        rho_limit_file,            & ! Filename (hdf5) of 3D rho limit (floor).
        rho_limit_factor,          & ! Scalar factor to multiply rho_limit loaded from file.
        max_alfven_speed_rho_mod,  & ! If set >0, this activates a modification that
                                     ! changes rho such that the Alfven speed is less than the
                                     ! maximum specified here (code units).
        rhobc_maxfac_r1,           & ! Setting this dimensionless constant will limit the
                                     ! values of rho as it is extrapolated beyond the half
                                     ! mesh boundaries. This can prevent the extrapolated
                                     ! rho from ever going negative.
!
! ****** WKB pressure waves.
!
        advance_pw,                & ! (Logical) toggle to activate WKB pressure waves.
        pw0,                       & ! Amplitude of pressure waves.
        rho_aw,                    & ! Slow down the time scale of WKB evolution by this
                                     ! factor to speed up the PW advance but
                                     ! can be suspect if ep/m has comparable dynamic
                                     ! timescales to the MHD evolution.
        use_pw_theta_profile,      & ! (Logical) to turn on a theta profile for PW.
        awthprof_th,               & ! Lower limit parameter for PW theta profile.
        awthprof2_th,              & ! Upper limit parameter for PW theta profile.
        awthprof_dth,              & ! Width parameter for PW theta profile.
        ifcheck0pw,                & ! (Logical) toggle to check for negative pw and quit if found.
        dissipate_aw,              & ! Dissipate the PW advance.
        modulate_pw0,              & ! Modulate the PW advance.
        dbob_aw,                   & ! PW dissipation parameter.
        wdbob_aw,                  & ! PW dissipation parameter.
        tau_aw,                    & ! PW dissipation parameter.
        use_pw_rcut,               & ! (Logical) Set to manually cutoff the wave pressure
                                     ! force below a certain height.
                                     ! NOTE: This also applies to WTD.
        pw_rcut_r0,                & ! Center radius for the tanh cutoff function.
        pw_rcut_width,             & ! Width of the tanh cutoff function.

!
! ****** WTD heating and pressure waves.
!
        advance_zw,                & ! (Logical) toggle to activate WTD turbulence waves.
        wtd_z0,                    & ! Amplitude of outgoing waves at the inner boundary.
        wtd_b0,                    & ! Reference value of B in the dissipation constant.
        wtd_lambda0,               & ! Reference length scale in dissipation constant.
        wtd_reflect_bc,            & ! The BC for the wave leaving the domain at r0. Options:
                                     !   NONE : Let the wave pass through (default).
                                     !   CONS : Reflect the wave such that the net Poynting flux
                                     !          is ALWAYS matching the outward Poynting flux.
                                     !   AMPL : Reflect the amplitude, adding it to the outgoing wave.
        wtd_add_zw_heating,        & ! (Logical) toggle to add WTD heating to temperature advance.
        wtd_add_zw_pressure,       & ! (Logical) toggle to add WTD pressure term to the velocity
!                                      advance. This refers to zp,zm ONLY, which are seperate
!                                      pressures from the ep,em advance.
        wtd_icond,                 & ! Sets the 3D initial condition of zp,zm. Options:
                                     !   CONSTANT  : Set zp/zm to a constant value.
                                     !   WKB       : Use 3D rho and WKB approx w/ v=0 set+zp and -zm.
                                     !   WKB_BR    : Like WKB but check Br to assign zp or zm only.
                                     !   EPEM      : Use the wave energies in ep and em to get zp and zm.
                                     !   FROM_FILE : Set the radial zp, zm profiles from a 1D file.
        wtd_ic1dfile,              & ! Filename (hdf5) for 1D initial WTD "FROM_FILE".
        wtd_icfac,                 & ! This constant multiplies all the initial
                                     ! conditions except 'constant' where instead the
                                     ! value is set directly.
        zw_dissp,                  & ! (Logical) toggle to turn the dissipation term.
        zw_reflection,             & ! (Logical) toggle to turn the reflection term.
        zw_uwc_s,                  & ! Upwind coefficient when computing the gradients
                                     ! in the propagation and Dissipation terms.
        zw_uwc_z,                  & ! Upwind coefficient when computing the gradients
                                     ! in v dot grad z term
        zw_cfl,                    & ! CFL factor for the ZW advance.
        wtd_use_zw_limit,          & ! (Logical) toggle to impose limits to the maxium
                                     ! absolute values of zp and zm. This can be done as a constant
                                     ! and/or as a radial profile.
        zw_limit_amplitude,        & ! Maximum value for zp & zm (mas units).
        zw_limit_radial_file,      & ! Filename (hdf5) of 1D radial profile for the
                                     ! maximum absolute value of wave amplitude.
        zw_flux_limiter_type,      & ! Flux limiting function to use for ZW.  Options:
                                     !   OSPRE
                                     !   MINMOD
        wtd_use_flux_limiter_gradzw,  & ! (Logical) toggle to use 2nd order flux-limiting
                                          ! scheme for the v dot grad z term.
        wtd_use_flux_limiter_gradsrc, & ! (Logical) toggle to use 2nd order flux-limiting
                                          ! scheme for the propagation and reflection terms
        wtd_use_zw_effective_rho_limit, & ! Create a "fake" base density for the corona as
                                          ! seen by zw. This works by turning off reflection
                                          ! and dissipation smoothy above a certain density
                                          ! value to avoid over-reflection w/ smooth Br0.
        zw_effective_rho_limit_lr, & ! Set to log(rho0) for the center of the smooth tanh profile.
        zw_effective_rho_limit_lw, & ! Set to log(rho_width) for the width of the tanh profile in log-space.
        zw_rho_aw,                 & ! Slow down the time scale of WTD evolution by this
                                     ! factor to speed up the ZW advance but
                                     ! can be suspect if zp/m has comparable dynamic
                                     ! timescales to the MHD evolution.
        wtd_bc_extrap_fac_r1,      & ! Dimensionless constant to limit the extrapolation
                                     ! of va in getva_zw past the radial boundaries.
                                     ! This works by making va_outside no less than va_inside and
                                     ! it can be used to prevent negative extrapolated values.
        wtd_use_zw_horho_limit,    & ! (Logical) toggle to limit the heating per mass density
                                     ! to avoid blowing up in the solar wind when something
                                     ! is suspect with zp,zm evolution at these heights (e.g. CME).
        zw_horho_limit_rlim,       & ! Radius above which to apply the limiter.
        zw_horho_limit_value,      & ! Maximum value of heat/rho (mas units).
        wtd_use_zw_flux_mask,      & ! (Logical) toggle to read a 2D profile that specifies
                                     ! a fractional reduction to the outward Poynting flux.
                                     ! This will hit the outward z0 amplitude by sqrt of the
                                     ! profile.
        z0_flux_mask_tp_file,      & ! Filename (hdf5) for theta-phi zw flux mask.
        wtd_use_open_field_cutoff, & ! (Logical) toggle to activate a Poynting flux limiter that
                                     ! limits the amount of heat dumped into open field lines.
        wtd_open_cutoff_maxflux,   & ! Flux limit set in CGS units (erg s-1 cm-2).
        wtd_open_cutoff_dt_eq_s,   & ! "Equilibrate" the limiter slowly at a timescale specified in
                                     ! seconds (updates a moving average).
!
! ****** Charge states (see also the charge states parameter namelist below).
!
        advance_fcs,               & ! (Logical) toggle to activate charge state model.
        if_vmod,                   & ! Slow down the ions in the lower corona and
                                     ! increase their ionization level.
        r_vmod,                    & ! Specifies the radius below which the ion
                                     ! velocity is switched off.
        dr_vmod,                   & ! Sets the radial interval over which the mod occurs.
        tmod1,                     & ! Modify the temperature in calculating charge states.
        tmod0,                     & ! Modify the temperature in calculating charge states.
!
! ****** Boundary driving of corona.
!
        evolve_flux,               & ! Must set this to .true. to use time_dependent_corona
!
! ****** Boundary driving of coronal flux.
!
        rotation_flux,             & ! (Logical) Set to .false. to use VxB boundaries.
                                     ! If .true., some form of driving must be activated.
        emerging_flux,             & ! (Logical) to activate emerging flux.
        eflux,                     & ! Structure specifying flux driving. Contains:
                                     !   phi_driven
                                     !   psi_driven
                                     !   e_driven
                                     !   phi_file
                                     !   psi_file
                                     !   normalize_phi
                                     !   normalize_psi
                                     !   vr_set
                                     !   vr_file
!
! ****** Boundary driving of corona with B and V (PBV).
!
        prescribe_bv,              & ! (Logical) to activate B and V driving.
        pbv_path,                  & ! System path to where the PBV files are located.
        pbv_sequence,              & ! Comma-seperated list of times for
                                     ! sequence of boundary files (mas units).
        pbv_node,                  & ! Comma-separated list of file indices for
                                     ! sequence of boundary files.
        deltat_pbv,                & ! Time offset (mas units) to apply to pbv_sequence list.
        br_pbv_file,               & ! Base filename of Br boundary files.
                                     ! E.g. if files are "PATH/br_test001.h5", set
                                     ! br_pbv_file='br_test'
        bt_pbv_file,               & ! Base filename of Bt boundary files.
        bp_pbv_file,               & ! Base filename of Bp boundary files.
        vr_pbv_file,               & ! Base filename of Vr boundary files.
        vt_pbv_file,               & ! Base filename of Vt boundary files.
        vp_pbv_file,               & ! Base filename of Vp boundary files.
        pbv_bcvfac,                & ! Factor to multiply boundary velocity values.
        if_pchip,                  & ! (Logical) toggle to activate pchip interpolation for PBV.
                                     ! Set to .false. if using "time_dependent_corona_from_files"
                                     ! (pchip is still used)
!
! ****** Time-dependent corona driving (B, V, and Phi).
!
        time_dependent_corona,     & ! (Logical) toggle to activate TDC driving.
        tdc_edb_correction_trunc,  & ! Apply correction to preserve Br evolution but
                                     ! truncate at neutral lines.
        tdc_edb_correction_etmod,  & ! Apply correction to E-tangential at neutral lines
                                     ! to better enforce E.B~0.  This will not
                                     ! strictly preserve Br evolution at neutral lines.
        tdc_edb_correction_etmod_eta, & ! Apply photospheric resistivity of this amplitude.
                                        ! Can help preserve Br evolution at neutral lines.
        tdc_edb_br_eps,            & ! Limiing Br value for above two corrections.
        tdc_edb_btp_a,             & ! Limit the size of E_r/E_t at the neutral line.
        tdc_edb_btp_d,             & ! Limit the perpendicular velocity as a
                                     ! fraction of the sound speed.
        time_dependent_corona_from_files, & ! (Logical) toggle to activate TDC driving from files.
        tdcff_path,                & ! System path to where the boundary files are located.
        br_tdcff_file,             & ! Base filename of Br boundary files (see br_pbv_file).
        vt_tdcff_file,             & ! Base filename of Vt boundary files.
        vp_tdcff_file,             & ! Base filename of Vp boundary files.
        phi_tdcff_file,            & ! Base filename of PHI boundary files.
        tdcff_sequence,            & ! Comma-seperated list of times for
                                     ! sequence of boundary files (mas units).
        tdcff_node,                & ! Comma-separated list of file indices for
                                     ! sequence of boundary files.
        deltat_tdcff,              & ! Time offset (mas units) to apply to pbv_sequence list.
!
! ****** Surface flows and shear.
!
        flow,                      & ! Flow structure for specifying surface flows.
                                     ! Contains same fields as "shear" structure.
        arotate,                   & ! Differential rotation parameter.
        brotate,                   & ! Differential rotation parameter.
        crotate,                   & ! Differential rotation parameter.
        v_north,                   & ! Meridional flow parameter.
        v_south,                   & ! Meridional flow parameter.
        v_drive,                   & ! Velocity driving speed (mas units).
        v_flow_norm,               & ! Magnitude of normal velocity flow.
        v_flow_trans,              & ! Magnitude of transverse velocity flow.
        shear,                     & ! Shear structure for specifying surface flows.
                                     ! Contains:
                                     !   active
                                     !   type
                                     !   mask_t0
                                     !   mask_p0
                                     !   mask_width_t
                                     !   mask_width_p
                                     !   mask_angle
                                     !   dthmax
                                     !   th0
                                     !   power
                                     !   file_r
                                     !   file_t
                                     !   file_p
                                     !   normalize_vtrans
                                     !   normalize_vnorm
!
! ****** Helicity pumping.
!
        helicity_pumping,          & ! (Logical) toggle to activate helicity pumping.
        hpump_cadence,             & ! Cadence (mas time units) for helicity pumps.
        hpump_time_offset,         & ! Offset time (mas units) for cadence.
        hpump_constant,            & ! Overall multiplier.
        hpump_profile,             & ! Type of helicity pumping profile.  Options:
                                     !   UNIFORM
                                     !   RADIALLY_DEPENDENT
                                     !   CUSTOM_TP+R_PROFILE
                                     !   CUSTOM_PROFILE
        r_hpump_crit,              & ! Radial-dept helicity pumping profile parameter.
        dr_hpump_crit,             & ! Radial-dept helicity pumping profile parameter.
        hpump_fac_0,               & ! Radial-dept helicity pumping profile parameter.
        hpump_fac_1,               & ! Radial-dept helicity pumping profile parameter.
        hpump_profile_r,           & ! Radial helicity pumping profile structure.  Contains:
                                     !   active
                                     !   f(3)
                                     !   x(2)
                                     !   w(2)
        hpump_profile_tp_file,     & ! Filename (hdf5) of theta-phi helicity pumping profile.
        hpump_profile_file,        & ! Filename (hdf5) of 3D  helicity pumping profile.
!
! ****** Tracer particles.
!
        trace_particles,           & ! (Logical) toggle to activate tracer particles.
        trace_reseed_type,         & ! String to indicate what to do when tracers leave the outer
                                     ! radial domain.  Choices are:
                                     !   NONE       : Do nothing (positions are "stuck" on boundary.
                                     !   R_PERIODIC : Re-seed the tracers at a specified radius.
        trace_reseed_r0,           & ! Radius (in Rs) to reseed tracer particles when they leave the domain.
        trace_track_ds,            & ! (Logical) toggle to activate tracking total distance for
                                     ! tracer particles.
!
! ****** Semi-implicit operator options.
!
        isitype,                   & ! Toggle semi-implicit term 1: on  0: off (explicit).
        simult,                    & ! Factor to multiply the semi-implicit term.
        si_aggressive,             & ! (Logical) toggle to use non-uniform SI factor (.true.)
                                     ! or a uniform max value (.false.).
        si_local_kv,               & ! (Logical) toggle to use non-uniform SI flow term (.true.)
                                     ! of a uniform max CFL value (.false.).
        fac_cflv,                  & ! Semi-implicit term CFL factor.
!
! ****** "Freeze-B" mode.  Freeze the field and allow flow along field lines.
!
        freeze_b,                  & ! (Logical) toggle to activate the "freeze-B" mode.
        bhat_mask_file,            & ! Filename (hdf5) of 3D mask [0,1] that
                                     ! transitions b-hat from being aligned along B
                                     ! to being aligned along the radial direction.
!
! ****** Field line mode.
!
        fl_compute,                & ! (Logical) toggle to activate field line computation.
        fl_file,                   & ! Filename (hdf5) containing 1D field line.
!
! ****** Numerical algorithm options.
!
        use_old_jxb,               & ! Use legacy JxB calculation (.true.) or not (.false.).
        use_old_vdgv,              & ! Use older V-dot-Grad-V calculation (.true.)
                                     ! or use experimental one (.false.).
                                     ! Only use the old one.
        upwind_a,                  & ! Upwind factor for all components of vector potential
                                     ! advection (real value [0,1]).
                                     !   0: Central difference
                                     !   1: Full upwind
        upwind_ar,                 & ! Upwind factor for radial component of vector potential.
        upwind_at,                 & ! Upwind factor for theta component of vector potential.
        upwind_ap,                 & ! Upwind factor for phi component of vector potential.
        upwind_v,                  & ! Upwind factor for velocity advection (see upwind_a).
        upwind_t,                  & ! Upwind factor for temperature advection (see upwind_a).
                                     ! This is for both TE and TP.
        upwind_rho,                & ! Upwind factor for density advection (see upwind_a).
        pred_v,                    & ! (Logical) toggle to use predictor in momentum equation.
        pred_a,                    & ! (Logical) toggle to use predictor in induction equation.
        pred_t,                    & ! (Logical) toggle to use predictor in energy equation.
        pred_rho,                  & ! (Logical) toggle to use predictor in density advance.
        betapc_v_flow,             & ! Factor to multiply advection term in momentum predictor.
        betapc_v_wave,             & ! Factor to multiply wave term in momentum predictor.
        betapc_t_flow,             & ! Factor to multiply advection term in energy predictor.
        betapc_t_wave,             & ! Factor to multiply wave term in energy predictor.
        betapc_rho_flow,           & ! Factor to multiply advection term in density predictor.
        betapc_rho_wave,           & ! Factor to multiply wave term in density predictor.
        betapc_si,                 & ! Factor for semi-implicit term in predictor (real, [0,1]).
        betapc_a,                  & ! Factor for VxB (vector potential) advection predictor.
! ****** Super time stepping (ESRK) and PTL options.
        use_sts_visc,              & ! (Logical) Set to .true. to use a STS method for viscosity
                                     ! instead of PCG. (By default also activates PTL).
        use_sts_tc,                & ! (Logical) Set to .true. to use a STS method for thermal
                                     ! conduction instead of PCG. (By default also activates PTL).
        sts_type,                  & ! Select which STS method to use:
                                     !   1: RKL1
                                     !   2: RKL2
                                     !   3: RKG2
        visc_auto_subcycle,        & ! Use PTL time-step subcycling for viscosity.
        visc_subcycles_max,        & ! Maximum allowed subcycles for PTL for viscosity.
        visc_subcycles,            & ! Set fixed number of subcycles for viscosity.
        tc_auto_subcycle,          & ! Use PTL time-step subcycling for thermal conduction.
        tc_subcycles_max,          & ! Maximum allowed subcycles for PTL for thermal conduction.
        tc_subcycles,              & ! Set fixed number of subcycles for thermal conduction.
! ****** Preconditioned Conjugate Gradient solver options.
        ncghist,                   & ! Write solver iteration residuals every ncghist iterations.
                                     ! Note that initial potential field solvers use ncghist=100
                                     ! unless ncghist is set greater than 0.
        ncgmax,                    & ! Maximum allowed number of solver iterations (all solvers).
                                     ! If exceeded, the run stops.
        ifprec_t,                  & ! Set preconditioner (PC) type for thermal conduction solver:
                                     !   0: None
                                     !   1: Diagonal scaling
                                     !   2: SGS
                                     !   3: ILU0
                                     ! Note this setting can be overridden when running on GPUs.
        ifprec_a,                  & ! PC type for resistivity solver (see ifprec_t).
        ifprec_v,                  & ! PC type for momentum and viscosity solvers (see ifprec_t)
        ifprec_divb,               & ! PC type for remesh divB cleaner solver (see ifprec_t)
        ifprec_pot2d,              & ! PC type for 2D potential field solvers (see ifprec_t)
        ifprec_pot3d,              & ! PC type for 3D potential field solver:
                                     !   0: None
                                     !   1: Diagonal scaling
        ifprec_32,                 & ! Logical toggle to use single-precision (.true.)
                                     ! or double precision (.false.) solver preconditioners.
        epscg_a,                   & ! Convergence tolerance for resistivity solve.
        epscg_v,                   & ! Convergence tolerance for semi-implicit and viscosity solves.
        epscg_t,                   & ! Convergence tolerance for thermal conduction solves.
        epscg_potfld,              & ! Convergence tolerance for initial potential solves.
        epscg_newflux,             & ! Convergence tolerance for boundary driving potential solves.
        epscg_divb,                & ! Convergence tolerance for remesh divB cleaner solve.
! ****** Stabilizing options.
        filter_poles,              & ! (Logical) toggle to activate all polar filter options.
        pole_filter_t,             & ! (Logical) toggle to activate polar filter for temperature.
        pole_filter_rho,           & ! (Logical) toggle to activate polar filter for density.
        pole_filter_pw,            & ! (Logical) toggle to activate polar filter for pressure waves.
        pole_filter_vr,            & ! (Logical) toggle to activate polar filter for radial velocity.
        pole_filter_z,             & ! (Logical) toggle to activate polar filter for WTD z+/z-.
        expert_user_override,      & ! Type that only currently contains "limit_supersonic_inflow"
                                     ! logical, which sets the velocity to the sound speed
                                     ! if there is supersonic inflow.
!
! ****** Debugging.
!
        print_matrix_pot2d,        & ! Write out dense matrix for 2D potential field solve.
        print_matrix_pot3d,        & ! Write out dense matrix for 3D potential field solve.
        print_matrix_adva,         & ! Write out dense matrix for resistivity solve.
        print_matrix_advv,         & ! Write out dense matrix for semi-implicit and viscosity solves.
        print_matrix_t,            & ! Write out dense matrix for thermal conduction solve.
        debug_wtd,                 & ! (Logical) toggle to activate debugging of WTD.
        debug_wtd_open_field_cutoff, & ! Dump the boundary slices for the WTD Poynting flux and the
                                       ! limiter fields.
        debug_tdc,                 & ! (Logical) toggle to activate debugging of TDC.
                                     ! It outputs electric fields (and other quantities)
                                     ! at the R0 boundary at the slice cadence.
        ifvdgv,                    & ! (Logical) toggle to use (.true.) advection terms in momentum equation
                                     ! or not (.false.).  For testing purposes only.
        use_exp_visc,              & ! Set to (.true.) to use explicit Euler for viscosity.
        use_exp_tc                   ! Set to (.true.) to use explicit Euler for thermal conduction.
!
! ****** Interplanetary run (heliosphere).
!
      namelist /interplanetary/    &
        interplanetary_run,        & ! (Logical) Set .true. to activate interplanetary boundary driving.
        boundary_frame,            & ! Frame of reference of the boundary files. Options:
                                     !   FAKE_COROTATING : Corotating but without v-phi C-forces.
                                     !   COROTATING
                                     !   INERTIAL
        ip_path,                   & ! Directory where boundary files reside.
        ip_sequence,               & ! Comma-seperated list of times for
                                     ! sequence of boundary files (mas units).
        ip_node,                   & ! Comma-separated list of file indices for
                                     ! sequence of boundary files.
        deltat_ip,                 & ! Time offset (mas units) to apply to ip_sequence list.
        corotating_relaxation_time,& ! Time offset (mas units) for boundary phi-shift.
                                     ! Use this when you have a simulation that was
                                     ! initially relaxed in a corotating frame, and subsequent
                                     ! restarts are to be computed in the inertial frame.
                                     ! Also useful for various other use-cases.
        brfile,                    & ! Base filename of Br boundary files (see br_pbv_file).
        btfile,                    & ! Base filename of Bt boundary files.
        bpfile,                    & ! Base filename of Bp boundary files.
        vrfile,                    & ! Base filename of Vr boundary files.
        vtfile,                    & ! Base filename of Vt boundary files.
        vpfile,                    & ! Base filename of Vp boundary files.
        rhofile,                   & ! Base filename of RHO boundary files.
        tfile,                     & ! Base filename of T boundary files.
        epfile,                    & ! Base filename of Ep boundary files.
        emfile,                    & ! Base filename of Em boundary files.
        fcsfile,                   & ! Base filename of FCS boundary files.
        zpfile,                    & ! Base filename of Zp boundary files.
        zmfile,                    & ! Base filename of Zm boundary files.
        ip_bc_interp_order,        & ! Order for bc file rotation interpolation.
        ip_bc_use_pot_solves,      & ! (Logical) toggle to use potential field solves for the boundaries
                                     ! or not.  Should always be .true. unless using zero transverse
                                     ! fields/velocities.
        ip_bc_shift_phi_guess,     & ! Use the old phi solution rotated as initial solver guess.
        ip_bc_shift_psi_guess        ! Use the old psi solution rotated as initial solver guess.
!
! ****** Charge states model options.
!
      namelist /fcs_nl/            &
        nelem,                     & ! Number of elements.
        natom_list,                & ! Array of atomic numbers of elements.
        path_eigen                   ! Directory where the Chianti ionization
                                     ! files are stored.
!
!-----------------------------------------------------------------------
!